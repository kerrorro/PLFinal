
3. A python file that demonstrates python closures
similar to DrCannata/Python/Mar3Class
Functional python,
which you use in mini-lisp
either through the "exec" function
or another function

- Created a file called ObjectFactory
- ObjectFactory has Object named Employee
- Within employee we have closure 'f' and 'run'
- We apply the closure 'f' and assign it to 'run'
- The closure 'f' has 'data' and 'cf' (our getter and setter)
- 'data' contains the datas of Employee object
- 'cf' act as getter and setter for 'data'


TODO The Demonstration
(exec 'import ObjectFactory;

employee = ObjectFactory.Employee();

employee.run("$firstName")("Fahran"); // setter

employee.run("$lastName")("Kamili"); // setter

employee.run("$title")("Software Engineer"); // setter

toReturn = employee.run("firstName") +
" " + employee.run("lastName") +
", " + employee.run("title")') // getter

TODO What to put in terminal
(exec 'import ObjectFactory; employee = ObjectFactory.Employee(); employee.run("$firstName")("Fahran"); employee.run("$lastName")("Kamili"); employee.run("$title")("Software Engineer"); toReturn = employee.run("firstName") + " " + employee.run("lastName") + ", " + employee.run("title")')

TODO the AST
['exec', '\'import ObjectFactory; employee = ObjectFactory.Employee(); employee.run("$firstName")("Fahran"); employee.run("$lastName")("Kamili"); employee.run("$title")("Software Engineer"); toReturn = employee.run("firstName") + " " + employee.run("lastName") + ", " + employee.run("title")\'']

4. A java file that demonstrates streams operations
(similar to what was demonstrated
in class by the student group on May 2nd),
which you use in mini-lisp either through
the "exec" function or another function.

- Created ListComprehension.java




