
3. A python file that demonstrates python closures
similar to DrCannata/Python/Mar3Class
Functional python,
which you use in mini-lisp
either through the "exec" function
or another function

- Created a file called ObjectFactory
- ObjectFactory has Object named Employee
- Within employee we have closure 'f' and 'run'
- We apply the closure 'f' and assign it to 'run'
- The closure 'f' has 'data' and 'cf' (our getter and setter)
- 'data' contains the datas of Employee object
- 'cf' act as getter and setter for 'data'


TODO The Demonstration
(exec 'import ObjectFactory;

employee = ObjectFactory.Employees();

employee.run("$firstName")("Fahran"); // setter

employee.run("$lastName")("Kamili"); // setter

employee.run("$title")("Software Engineer"); // setter

toReturn = employee.run("firstName") +
" " + employee.run("lastName") +
", " + employee.run("title")') // getter

TODO What to put in terminal
(exec 'import ObjectFactory; employee = ObjectFactory.Employee(); employee.run("$firstName")("Fahran"); employee.run("$lastName")("Kamili"); employee.run("$title")("Software Engineer"); toReturn = employee.run("firstName") + " " + employee.run("lastName") + ", " + employee.run("title")')

TODO the AST
['exec', '\'import ObjectFactory; employee = ObjectFactory.Employee(); employee.run("$firstName")("Fahran"); employee.run("$lastName")("Kamili"); employee.run("$title")("Software Engineer"); toReturn = employee.run("firstName") + " " + employee.run("lastName") + ", " + employee.run("title")\'']

4. A java file that demonstrates streams operations
(similar to what was demonstrated
in class by the student group on May 2nd),
which you use in mini-lisp either through
the "exec" function or another function.

- Created Employee.java
- Created Department.java
- Created ListFactory.py
    - ListFactory will build Employee list or Department List
- Created ListComprehension.java
    - ListComprehension will accept list of Employee and List of Department
    - Given the list of Employee and Department, it will run the sql query inside ListComprehension

TODO The Demonstration
(exec '
import ListFactory;
import ListComprehension;
employees = ListFactory.build("employees.txt");
departments = ListFactory.build("departments.txt");
ListComprehension.run(employees,departments)')

TODO What to put in Terminal
(exec 'import ListFactory; import ListComprehension; employees = ListFactory.build("employees.txt"); departments = ListFactory.build("departments.txt"); ListComprehension.run(employees,departments)')

5. Python Lambda plus List Comprehension
(similar to what was demonstrated in class by the student group on May 2nd),
which you use to implement a function in mini-lisp.


7. Using PLY, build a parser for a very small subset (one language feature)
of the Swift language that uses the eval function of mini-lisp.

- Explain the Tokens that we define in lex.py
- Explain rules that we defined in yacc.py using tree drawn from example below
- Don't forget to add arithmetic

TODO Example of the Swift code
let vegetable = "red pepper"
switch vegetable
{
    case "celery":
        print("Add some raisins and make ants on a log.")
    case "cucumber", "watercress":
        let people = 5*2
        print("That would make a good tea sandwich. For " + String(people) + " people")
    case "red pepper":
        print("Is it a spicy?")
    default:
        print("Everything tastes good in soup.")
}

TODO what to put in command line
let vegetable = "watercress" switch vegetable { case "celery": print("Add some raisins and make ants on a log.") case "cucumber", "watercress": let people = 5*2 print("That would make a good tea sandwich. For " + String(people) + " people") case "red pepper": print("Is it a spicy?") default: print("Everything tastes good in soup.")}












  /     /          /
 LET   IDENTIFIER /     expression
 /     /         /      /
let vegetable   =  "red pepper"